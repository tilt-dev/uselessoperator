kubebuilder init --domain op.tilt.dev
kubebuilder create api --group oscon --version v1 --kind Machine

// +kubebuilder:printcolumn:name="type",type="string",JSONPath=".spec.machinetype",format="byte"
// +kubebuilder:printcolumn:name="status",type="string",JSONPath=".status.status",format="byte"
// +kubebuilder:subresource:status

r := "o"
s := `\`
if len(machine.Status.Status) > 10 {
    machine.Status.Status = strings.Trim(machine.Status.Status[0:10], " ")
}
if machine.Status.Status == "HOWDY" {
    machine.Status.Status = r
    break
}
if machine.Status.Status == fill(10, r) {
    time.Sleep(time.Second)
    machine.Status.Status = "DELETE"
    break
}
time.Sleep(time.Millisecond * 500)
machine.Status.Status = fill(plusminus(len(machine.Status.Status)), r)
machine.Status.Status = machine.Status.Status + fill(10-len(machine.Status.Status), " ") + s

func fill(n int, c string) string {
r := ""
for i := 0; i < n; i++ {
r += c
}
return r
}
func plusminus(count int) int {
if count == 0 {
return 1
}
if count == 1 {
return 2
}
n := rand.Intn(2)
if n == 0 {
n = -1
}
n += count
return n
}

metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

func (r *MachineReconciler) newWeb(machine tiltv1.Machine) *tiltv1.Web {
return &tiltv1.Web{
TypeMeta: metav1.TypeMeta{Kind: "Web"},
ObjectMeta: metav1.ObjectMeta{
Name:      machine.Name + "-web",
Namespace: machine.Namespace,
},
Spec: tiltv1.WebSpec{},
}
}

opres, err := ctrl.CreateOrUpdate(ctx, r, r.newWeb(machine), func() error { return nil })
if err != nil {
log.Error(err, "error creating web")
}
log.Info(fmt.Sprint("CreateOrUpdate says:", opres), "name", req.NamespacedName)

"sigs.k8s.io/controller-runtime/pkg/handler"
"sigs.k8s.io/controller-runtime/pkg/source"
"k8s.io/apimachinery/pkg/types"

Watches(
&source.Kind{Type: &tiltv1.Machine{}},
&handler.EnqueueRequestsFromMapFunc{
ToRequests: handler.ToRequestsFunc(
func(obj handler.MapObject) []ctrl.Request {
return []ctrl.Request{
{
NamespacedName: types.NamespacedName{
Name:      obj.Meta.GetName(),
Namespace: obj.Meta.GetNamespace(),
},
},
}
},
)},
).
